#!/usr/bin/env python
# -*- coding: utf-8 -*-

from smap import settings
from smap.scanner import Scanner
from smap.database import Base

from sqlalchemy.engine.url import URL
from sqlalchemy.engine import reflection
from sqlalchemy.orm import sessionmaker
from sqlalchemy_utils import database_exists

import click
import mimetypes
import random
import pkg_resources
import os
import sys
import sqlalchemy

Engine = sqlalchemy.create_engine(
    URL(**settings.DATABASE), echo=settings.DEBUG)
Session = sessionmaker(bind=Engine)

s = Session()

def has_tables():
    inspector = reflection.Inspector.from_engine(Engine)
    return any(inspector.get_table_names())

if not database_exists(Engine.url):
    print 'Database not found...'
    sys.exit(1)
    
if not has_tables():
    Base.metadata.create_all(Engine, checkfirst=True)
    print 'creating tables...'
    
def inspect_csv(ctx, param, value):
    mimetype = mimetypes.guess_type(value, strict=True)[0]
    extension = mimetypes.guess_extension(mimetype, strict=True)

    if mimetype != 'text/csv' or extension != '.csv':
        raise click.BadParameter('\'{0}\' is not a CSV file.'.format(value))

    fsize = os.stat(value).st_size
    if not fsize >= 0 and fsize <= settings.MAX_BYTES:
        raise click.BadParameter(
            'CSV doesn\'t meet size requirements {0}K.'.format(
                settings.MAX_BYTES))
    return value


def welcome():
    print r"""

 ________  _____ ______   ________  ________
|\   ____\|\   _ \  _   \|\   __  \|\   __  \
\ \  \___|\ \  \\\__\ \  \ \  \|\  \ \  \|\  \
 \ \_____  \ \  \\|__| \  \ \   __  \ \   ____\
  \|____|\  \ \  \    \ \  \ \  \ \  \ \  \___|
    ____\_\  \ \__\    \ \__\ \__\ \__\ \__\
   |\_________\|__|     \|__|\|__|\|__|\|__|
   \|_________|

---- [ version {0}  D.Ford <Demetrius.Ford@ucf.edu ] ----

    """.format(settings.VERSION)


@click.group()
@click.version_option(version=settings.VERSION)
def smap():
    pass


@smap.command()
def scan():
    welcome()
    click.echo('[*] scanning sites ...')


@smap.command()
@click.argument('fpath', type=click.Path(exists=True), callback=inspect_csv)
def upload(fpath):
    pass

if __name__ == '__main__':
    sys.exit(smap())
