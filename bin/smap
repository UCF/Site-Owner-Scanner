#!/usr/bin/env python
# -*- coding: utf-8 -*-

from smap.database import Base
from smap.database import IP
from smap.database import Domain
from smap.database import FirewallMap
from smap.database import DNSList
from smap.database import DNSRecordType

from smap import settings
from smap.scanner import Scanner
from sqlalchemy.engine.url import URL
from sqlalchemy.engine import reflection
from sqlalchemy.orm import sessionmaker
from sqlalchemy_utils import database_exists

import click
import mimetypes
import random
import pkg_resources
import os
import sys
import csv
import sqlalchemy

Engine = sqlalchemy.create_engine(
    URL(**settings.DATABASE), echo=settings.DEBUG)
Session = sessionmaker(bind=Engine)


def dbsetup():
    """Handle DB installation if needed."""
    if not database_exists(Engine.url):
        print >> sys.stderr, 'ERROR: database does not exist.'
        sys.exit(1)

    inspector = reflection.Inspector.from_engine(Engine)
    if any(inspector.get_table_names()):
        return
    Base.metadata.create_all(Engine, checkfirst=True)
    print '[+] creating database tables ...'


def inspect_csv(ctx, param, value):
    """Inspect CSV file to ensure it follows strict requirements."""
    mimetype = mimetypes.guess_type(value, strict=True)[0]
    extension = mimetypes.guess_extension(mimetype, strict=True)

    if mimetype != 'text/csv' or extension != '.csv':
        raise click.BadParameter('\'{0}\' is not a CSV file.'.format(value))

    fsize = os.stat(value).st_size
    if not fsize >= 0 and fsize <= settings.MAX_BYTES:
        raise click.BadParameter(
            'CSV doesn\'t meet size requirements {0}K.'.format(
                settings.MAX_BYTES * 0.001))
    return value


def welcome():
    print r"""

 ________  _____ ______   ________  ________
|\   ____\|\   _ \  _   \|\   __  \|\   __  \
\ \  \___|\ \  \\\__\ \  \ \  \|\  \ \  \|\  \
 \ \_____  \ \  \\|__| \  \ \   __  \ \   ____\
  \|____|\  \ \  \    \ \  \ \  \ \  \ \  \___|
    ____\_\  \ \__\    \ \__\ \__\ \__\ \__\
   |\_________\|__|     \|__|\|__|\|__|\|__|
   \|_________|

---- [ version {0}  D.Ford <Demetrius.Ford@ucf.edu ] ----

    """.format(settings.VERSION)


@click.group()
@click.version_option(version=settings.VERSION)
def smap():
    pass


@smap.command()
def scan():
    welcome()
    click.echo('[*] scanning sites ...')


@smap.command()
@click.argument('path', type=click.Path(exists=True), callback=inspect_csv)
def upload(path):
    """Upload DNS dump to database."""
    with open(path, 'rb') as f:
        session = Session()
        dns_dump = csv.reader(f, delimiter=',', quoting=csv.QUOTE_MINIMAL)
        dns_dump.next()  # Ignore column header names
        for record in dns_dump:
            if record[1] in ('A', 'AAAA'):
                external_ip = IP(ip_address=record[2])
                internal_ip = IP(ip_address=record[3])

                firewall_map = FirewallMap(
                    internal_ip=internal_ip,
                    external_ip=external_ip)
                domain = Domain(name=record[0])
                record_type = DNSRecordType(name=record[1])

                dns_list = DNSList(
                    domain=domain,
                    record_type=record_type,
                    firewall_map=firewall_map)

                session.add_all([external_ip, internal_ip,
                                 firewall_map, domain, record_type, dns_list])

                try:
                    session.commit()
                except sqlalchemy.exc.SQLAlchemyError:
                    session.rollback()

if __name__ == '__main__':
    dbsetup()
    sys.exit(smap())
